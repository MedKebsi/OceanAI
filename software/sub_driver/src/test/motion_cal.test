
#include "Sensors/Sensors.h"
#include "Sensors/BMI088/BMI088.h"
#include "Sensors/BMP388/BMP388_DEV.h"
#include "Sensors/LIS3MDL/Adafruit_LIS3MDL.h"
#include "Orientation/Orientation.h"
#include "pins.h"

#include "Data/data_struct.h"
#include "Data/SD/SD.h"

#include "indication/LED.h"
#include "indication/Buzzer.h"

#include <Arduino.h>
#include <Entropy.h>

#include "time/time_util.h"

#include "Orientation/SensorFusion/SensorFusion.h"

#include "Sensors/LowPass.h"

#include <Adafruit_SensorLab.h>
#include <Adafruit_Sensor_Calibration.h>

int loopcount = 0;

SF filt;
SF filtf;

#if defined(ADAFRUIT_SENSOR_CALIBRATION_USE_EEPROM)
  Adafruit_Sensor_Calibration_EEPROM cal;
#else
  Adafruit_Sensor_Calibration_SDFat cal;
#endif


sensors::UnifiedSensors sensor;
Orientation ori;
RGBLED LEDa(RED_a, GRN_a, BLU_a);
RGBLED LEDb(RED_b, GRN_b, BLU_b);

LED signal(SIGNAL);

Buzzer buzz(BUZZ);

uint64_t previous_time;

Data data;

SD start;


void setup()
{
  Serial.begin(2000000);
  sensor.initNavSensors();
  sensor.initVoltmeter(v_div);
  sensor.initTDS(TDS);
  sensor.setInterrupts(BAR_int, ACC_int, GYR_int, MAG_int);
  sensor.setGyroBias();
  Entropy.Initialize();
  start.Startup();

  previous_time = scoped_timer.elapsed();

}

byte caldata[68]; // buffer to receive magnetic calibration data
byte calcount=0;

uint16_t crc16_update(uint16_t crc, uint8_t a)
{
  int i;
  crc ^= a;
  for (i = 0; i < 8; i++) {
    if (crc & 1) {
      crc = (crc >> 1) ^ 0xA001;
    } else {
      crc = (crc >> 1);
    }
  }
  return crc;
}
void receiveCalibration() {
  uint16_t crc;
  byte b, i;

  while (Serial.available()) {
    b = Serial.read();
    if (calcount == 0 && b != 117) {
      // first byte must be 117
      return;
    }
    if (calcount == 1 && b != 84) {
      // second byte must be 84
      calcount = 0;
      return;
    }
    // store this byte
    caldata[calcount++] = b;
    if (calcount < 68) {
      // full calibration message is 68 bytes
      return;
    }
    // verify the crc16 check
    crc = 0xFFFF;
    for (i=0; i < 68; i++) {
      crc = crc16_update(crc, caldata[i]);
    }
    if (crc == 0) {
      // data looks good, use it
      float offsets[16];
      memcpy(offsets, caldata+2, 16*4);
      cal.accel_zerog[0] = offsets[0];
      cal.accel_zerog[1] = offsets[1];
      cal.accel_zerog[2] = offsets[2];
      
      cal.gyro_zerorate[0] = offsets[3];
      cal.gyro_zerorate[1] = offsets[4];
      cal.gyro_zerorate[2] = offsets[5];
      
      cal.mag_hardiron[0] = offsets[6];
      cal.mag_hardiron[1] = offsets[7];
      cal.mag_hardiron[2] = offsets[8];

      cal.mag_field = offsets[9];
      
      cal.mag_softiron[0] = offsets[10];
      cal.mag_softiron[1] = offsets[13];
      cal.mag_softiron[2] = offsets[14];
      cal.mag_softiron[3] = offsets[13];
      cal.mag_softiron[4] = offsets[11];
      cal.mag_softiron[5] = offsets[15];
      cal.mag_softiron[6] = offsets[14];
      cal.mag_softiron[7] = offsets[15];
      cal.mag_softiron[8] = offsets[12];

      if (! cal.saveCalibration()) {
        Serial.println("**WARNING** Couldn't save calibration");
      } else {
        Serial.println("Wrote calibration");    
      }
      cal.printSavedCalibration();
      calcount = 0;
      return;
    }
    // look for the 117,84 in the data, before discarding
    for (i=2; i < 67; i++) {
      if (caldata[i] == 117 && caldata[i+1] == 84) {
        // found possible start within data
        calcount = 68 - i;
        memmove(caldata, caldata + i, calcount);
        return;
      }
    }
    // look for 117 in last byte
    if (caldata[67] == 117) {
      caldata[0] = 117;
      calcount = 1;
    } else {
      calcount = 0;
    }
  }
}



void loop()
{ 
  
  data.time_us = scoped_timer.elapsed();
  data.dt = (data.time_us - previous_time) / 1000000.0;
  previous_time = data.time_us;

  signal.blink(Entropy.random(20, 200));
  LEDa.displaySpectrum();
  LEDb.displaySpectrum();

  sensor.logToStruct(data);
  
  Quaternion orientation = ori.update(data.rgyr_x, data.rgyr_y, data.rgyr_z, data.dt);
 
  ori.convertAccelFrame(orientation, data.racc_x, data.racc_y, data.racc_z, &data.fWfacc_x, &data.fWfacc_y, &data.fWfacc_z);
  ori.toEuler(&data.ori_X, &data.ori_Y, &data.ori_Z);

  filt.MadgwickUpdate(data.rgyr_x, data.rgyr_y, data.rgyr_z, data.racc_x, data.racc_y, data.racc_z, data.rmag_x, data.rmag_y, data.rmag_z, data.dt);
  filtf.MadgwickUpdate(data.fgyr_x, data.fgyr_y, data.fgyr_z, data.facc_x, data.facc_y, data.facc_z, data.rmag_x, data.rmag_y, data.rmag_z, data.dt);

  double rx = filt.getRoll();
  double ry = filt.getPitch();
  double rz = filt.getYaw();

  double fx = filt.getRoll();
  double fy = filtf.getPitch();
  double fz = filtf.getYaw();

  /*
  Serial.print(rx);
  Serial.print("\t");
  Serial.print(ry);
  Serial.print("\t");
  Serial.print(rz);
  Serial.print("\t\t");
  Serial.print(fx);
  Serial.print("\t");
  Serial.print(fy);
  Serial.print("\t");
  Serial.print(fz);
  Serial.print("\t\t");
  Serial.print(data.rmag_x);
  Serial.print("\t");
  Serial.print(data.rmag_y);
  Serial.print("\t");
  Serial.println(data.rmag_z);

  */
  Serial.print("Raw:");
  Serial.print(int(data.racc_x*8192/9.8)); Serial.print(",");
  Serial.print(int(data.racc_y*8192/9.8)); Serial.print(",");
  Serial.print(int(data.racc_z*8192/9.8)); Serial.print(",");
  Serial.print(int(data.rgyr_x*RAD_TO_DEG*16)); Serial.print(",");
  Serial.print(int(data.rgyr_y*RAD_TO_DEG*16)); Serial.print(",");
  Serial.print(int(data.rgyr_z*RAD_TO_DEG*16)); Serial.print(",");
  Serial.print(int(data.rmag_x*10)); Serial.print(",");
  Serial.print(int(data.rmag_y*10)); Serial.print(",");
  Serial.print(int(data.rmag_z*10)); Serial.println("");

  Serial.print("Uni:");
  Serial.print(data.racc_x); Serial.print(",");
  Serial.print(data.racc_y); Serial.print(",");
  Serial.print(data.racc_z); Serial.print(",");
  Serial.print(data.rgyr_x, 4); Serial.print(",");
  Serial.print(data.rgyr_y, 4); Serial.print(",");
  Serial.print(data.rgyr_z, 4); Serial.print(",");
  Serial.print(data.rmag_x); Serial.print(",");
  Serial.print(data.rmag_y); Serial.print(",");
  Serial.print(data.rmag_z); Serial.println("");
  loopcount++;
  receiveCalibration();
  if (loopcount == 50 || loopcount > 100) {
    Serial.print("Cal1:");
    for (int i=0; i<3; i++) {
      Serial.print(cal.accel_zerog[i], 3); 
      Serial.print(",");
    }
    for (int i=0; i<3; i++) {
      Serial.print(cal.gyro_zerorate[i], 3);
      Serial.print(",");
    }  
    for (int i=0; i<3; i++) {
      Serial.print(cal.mag_hardiron[i], 3); 
      Serial.print(",");
    }  
    Serial.println(cal.mag_field, 3);
    loopcount++;
  }
  if (loopcount >= 100) {
    Serial.print("Cal2:");
    for (int i=0; i<9; i++) {
      Serial.print(cal.mag_softiron[i], 4); 
      if (i < 8) Serial.print(',');
    }
    Serial.println();
    loopcount = 0;
  }


  while(data.time_us >= 900000000ull)
  {
    //Serial.println(scoped_timer.elapsed());
    LEDa.setColor(255,0,0);
    start.rewindPrint();
    LEDa.setColor(0,255,0);
  }
  


 
}


